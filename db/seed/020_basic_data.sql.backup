-- Create base data
DROP TABLE IF EXISTS g_options;
CREATE TEMPORARY TABLE g_options (maxrows int);
--INSERT INTO g_options VALUES (1000);

DROP TABLE IF EXISTS stednavne_udstil.stednavn_udstilling;
CREATE TABLE stednavne_udstil.stednavn_udstilling AS
SELECT *
FROM stednavne_udstil_fdw.stednavn_udstilling
LIMIT (SELECT maxrows FROM g_options);

DROP TABLE IF EXISTS mat_kf.jordstykke;
CREATE TABLE mat_kf.jordstykke AS
SELECT
  elavsnavn, elavskode, matrnr, komnavn, wkb_geometry
FROM mat_kf_fdw.jordstykke
LIMIT (SELECT maxrows FROM g_options);

DROP TABLE IF EXISTS mat_kf.centroide;
CREATE TABLE mat_kf.centroide AS
SELECT *
FROM mat_kf_fdw.centroide
LIMIT (SELECT maxrows FROM g_options);

CREATE INDEX ON mat_kf.jordstykke(elavskode, matrnr);
CREATE INDEX ON mat_kf.centroide(elavskode, matrnr);

DROP TABLE IF EXISTS dar.navngivenvej;
CREATE TABLE dar.navngivenvej AS
SELECT
  id_lokalid::uuid,
  vejnavn,
  septima_vejnavnebeliggenhed_vejnavnelinje as geometri
FROM dar_fdw.navngivenvej_current
LIMIT (SELECT maxrows FROM g_options);

DROP TABLE IF EXISTS dar.navngivenvejpostnummer;
CREATE TABLE dar.navngivenvejpostnummer AS
SELECT
  id_lokalid::uuid,
  navngivenvej::uuid,
  postnummer::uuid
FROM dar_fdw.navngivenvejpostnummer_current
LIMIT (SELECT maxrows FROM g_options);

DROP TABLE IF EXISTS dar.postnummer;
CREATE TABLE dar.postnummer AS
SELECT
  id_lokalid::uuid,
  navn,
  postnr
FROM
  dar_fdw.postnummer_current
LIMIT (SELECT maxrows FROM g_options);

CREATE INDEX ON dar.navngivenvej(id_lokalid);
CREATE INDEX ON dar.navngivenvej USING gist(geometri);
CREATE INDEX ON dar.navngivenvejpostnummer(navngivenvej, postnummer);
CREATE INDEX ON dar.postnummer(id_lokalid);

DROP TABLE IF EXISTS dar.adresse;
CREATE TABLE dar.adresse AS
SELECT
  id_lokalid::uuid,
  adressebetegnelse,
  doerbetegnelse,
  doerpunkt,
  etagebetegnelse,
  bygning::uuid,
  husnummer::uuid
FROM
  dar_fdw.adresse_current
LIMIT (SELECT maxrows FROM g_options);

DROP TABLE IF EXISTS dar.husnummer;
CREATE TABLE dar.husnummer AS
SELECT
  id_lokalid::uuid,
  adgangsadressebetegnelse,
  adgangspunkt::uuid,
  husnummerretning,
  husnummertekst,
  vejpunkt::uuid,
  jordstykke,
  placeretpaaforeloebigtjordstykke,
  geodanmarkbygning,
  adgangtilbygning::uuid,
  supplerendebynavn,
  postnummer,
  substring(vejmidte FROM 1 FOR 4) AS kommunekode,
  substring(vejmidte FROM 6 FOR 4) AS vejkode,
  navngivenvej::uuid
FROM
  dar_fdw.husnummer_current
LIMIT (SELECT maxrows FROM g_options);

DROP TABLE IF EXISTS dar.adressepunkt;
CREATE TABLE dar.adressepunkt AS
SELECT
  id_lokalid::uuid,
  septima_position AS geometri
FROM
  dar_fdw.vw_adressepunkt_current ac
LIMIT (SELECT maxrows FROM g_options);

-- Indices
CREATE INDEX ON dar.adresse(husnummer);
CREATE INDEX ON dar.adresse(adressebetegnelse);
CREATE INDEX ON dar.husnummer(id_lokalid);
CREATE INDEX ON dar.husnummer(navngivenvej);
CREATE INDEX ON dar.husnummer(vejpunkt);
CREATE INDEX ON dar.adressepunkt(id_lokalid);
CREATE INDEX ON dar.adressepunkt USING gist (geometri);

-- Primary keys
ALTER TABLE dar.husnummer ADD CONSTRAINT husnummer_pk PRIMARY KEY (id_lokalid);
ALTER TABLE dar.adresse ADD CONSTRAINT adresse_pk PRIMARY KEY (id_lokalid);
ALTER TABLE dar.adressepunkt ADD CONSTRAINT adressepunkt_pk PRIMARY KEY (id_lokalid);

-- Foreign keys internal to dar
-- ALTER TABLE dar.adresse ADD CONSTRAINT adresse_husnummer_fk FOREIGN KEY (husnummer) REFERENCES dar.husnummer (id_lokalid) MATCH FULL;

DROP TABLE IF EXISTS scratch.dar_husnummer_dar_adgangspunkt_fk;
WITH invalid_relation AS
(UPDATE dar.husnummer h SET adgangspunkt = NULL WHERE adgangspunkt IS NOT NULL AND NOT EXISTS (SELECT 1 FROM dar.adressepunkt a WHERE h.adgangspunkt = a.id_lokalid) RETURNING *)
SELECT * INTO scratch.dar_husnummer_dar_adgangspunkt_fk FROM invalid_relation;
ALTER TABLE dar.husnummer ADD CONSTRAINT husnummer_adgangspunkt_fk FOREIGN KEY (adgangspunkt) REFERENCES dar.adressepunkt (id_lokalid) MATCH FULL;

DROP TABLE IF EXISTS scratch.dar_husnummer_dar_vejpunkt_fk;
WITH invalid_relation AS
(UPDATE dar.husnummer h SET vejpunkt = NULL WHERE vejpunkt IS NOT NULL AND NOT EXISTS (SELECT 1 FROM dar.adressepunkt a WHERE h.vejpunkt = a.id_lokalid) RETURNING *)
SELECT * INTO scratch.dar_husnummer_dar_vejpunkt_fk FROM invalid_relation;
ALTER TABLE dar.husnummer ADD CONSTRAINT husnummer_vejpunkt_fk FOREIGN KEY (vejpunkt) REFERENCES dar.adressepunkt (id_lokalid) MATCH FULL;

ALTER TABLE dar.husnummer ADD CONSTRAINT adresse_husnummer_adgangspunkt_fk FOREIGN KEY (adgangspunkt) REFERENCES dar.adressepunkt (id_lokalid) MATCH FULL;
ALTER TABLE dar.husnummer ADD CONSTRAINT adresse_husnummer_vejpunkt_fk FOREIGN KEY (vejpunkt) REFERENCES dar.adressepunkt (id_lokalid) MATCH FULL;

DROP TABLE IF EXISTS dagi_500.kommuneinddeling;
CREATE TABLE dagi_500.kommuneinddeling AS
SELECT * FROM dagi_500_fdw.kommuneinddeling
LIMIT (SELECT maxrows FROM g_options);

DROP TABLE IF EXISTS dagi_500.opstillingskreds;
CREATE TABLE dagi_500.opstillingskreds AS
SELECT * FROM dagi_500_fdw.opstillingskreds
LIMIT (SELECT maxrows FROM g_options);

DROP TABLE IF EXISTS dagi_500.storkreds;
CREATE TABLE dagi_500.storkreds AS
SELECT * FROM dagi_500_fdw.storkreds
LIMIT (SELECT maxrows FROM g_options);

DROP TABLE IF EXISTS dagi_500.politikreds;
CREATE TABLE dagi_500.politikreds AS
SELECT * FROM dagi_500_fdw.politikreds
LIMIT (SELECT maxrows FROM g_options);

DROP TABLE IF EXISTS dagi_500.postnummerinddeling;
CREATE TABLE dagi_500.postnummerinddeling AS
SELECT * FROM dagi_500_fdw.postnummerinddeling
LIMIT (SELECT maxrows FROM g_options);

DROP TABLE IF EXISTS dagi_500.regionsinddeling;
CREATE TABLE dagi_500.regionsinddeling AS
SELECT * FROM dagi_500_fdw.regionsinddeling
LIMIT (SELECT maxrows FROM g_options);

DROP TABLE IF EXISTS dagi_500.retskreds;
CREATE TABLE dagi_500.retskreds AS
SELECT * FROM dagi_500_fdw.retskreds
LIMIT (SELECT maxrows FROM g_options);

DROP TABLE IF EXISTS dagi_500.sogneinddeling;
CREATE TABLE dagi_500.sogneinddeling AS
SELECT * FROM dagi_500_fdw.sogneinddeling
LIMIT (SELECT maxrows FROM g_options);

DROP TABLE IF EXISTS dagi_10.postnummerinddeling;
CREATE TABLE dagi_10.postnummerinddeling AS
SELECT * FROM dagi_10_fdw.postnummerinddeling
LIMIT (SELECT maxrows FROM g_options);

